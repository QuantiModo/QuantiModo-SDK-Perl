package WWW::SwaggerClient::Object::UserVariable;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use base "WWW::SwaggerClient::Object::BaseObject";

#
#
#
#NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
#

my $swagger_types = {
    'parent_id' => 'int',
    'client_id' => 'string',
    'variable_id' => 'int',
    'default_unit_id' => 'int',
    'minimum_allowed_value' => 'double',
    'maximum_allowed_value' => 'double',
    'filling_value' => 'double',
    'join_with' => 'int',
    'onset_delay' => 'int',
    'duration_of_action' => 'int',
    'variable_category_id' => 'int',
    'updated' => 'int',
    'public' => 'int',
    'cause_only' => 'boolean',
    'filling_type' => 'string',
    'number_of_measurements' => 'int',
    'number_of_processed_measurements' => 'int',
    'measurements_at_last_analysis' => 'int',
    'last_unit_id' => 'int',
    'last_original_unit_id' => 'int',
    'last_value' => 'double',
    'last_original_value' => 'int',
    'last_source_id' => 'int',
    'number_of_correlations' => 'int',
    'status' => 'string',
    'error_message' => 'string',
    'last_successful_update_time' => 'DateTime',
    'standard_deviation' => 'double',
    'variance' => 'double',
    'minimum_recorded_daily_value' => 'double',
    'maximum_recorded_daily_value' => 'double',
    'mean' => 'double',
    'median' => 'double',
    'most_common_unit_id' => 'int',
    'most_common_value' => 'double',
    'number_of_unique_daily_values' => 'double',
    'number_of_changes' => 'int',
    'skewness' => 'double',
    'kurtosis' => 'double',
    'latitude' => 'double',
    'longitude' => 'double',
    'location' => 'string',
    'created_at' => 'DateTime',
    'updated_at' => 'DateTime',
    'outcome' => 'boolean',
    'sources' => 'string',
    'earliest_source_time' => 'int',
    'latest_source_time' => 'int',
    'earliest_measurement_time' => 'int',
    'latest_measurement_time' => 'int',
    'earliest_filling_time' => 'int',
    'latest_filling_time' => 'int'
};

my $attribute_map = {
    'parent_id' => 'parent_id',
    'client_id' => 'client_id',
    'variable_id' => 'variable_id',
    'default_unit_id' => 'default_unit_id',
    'minimum_allowed_value' => 'minimum_allowed_value',
    'maximum_allowed_value' => 'maximum_allowed_value',
    'filling_value' => 'filling_value',
    'join_with' => 'join_with',
    'onset_delay' => 'onset_delay',
    'duration_of_action' => 'duration_of_action',
    'variable_category_id' => 'variable_category_id',
    'updated' => 'updated',
    'public' => 'public',
    'cause_only' => 'cause_only',
    'filling_type' => 'filling_type',
    'number_of_measurements' => 'number_of_measurements',
    'number_of_processed_measurements' => 'number_of_processed_measurements',
    'measurements_at_last_analysis' => 'measurements_at_last_analysis',
    'last_unit_id' => 'last_unit_id',
    'last_original_unit_id' => 'last_original_unit_id',
    'last_value' => 'last_value',
    'last_original_value' => 'last_original_value',
    'last_source_id' => 'last_source_id',
    'number_of_correlations' => 'number_of_correlations',
    'status' => 'status',
    'error_message' => 'error_message',
    'last_successful_update_time' => 'last_successful_update_time',
    'standard_deviation' => 'standard_deviation',
    'variance' => 'variance',
    'minimum_recorded_daily_value' => 'minimum_recorded_daily_value',
    'maximum_recorded_daily_value' => 'maximum_recorded_daily_value',
    'mean' => 'mean',
    'median' => 'median',
    'most_common_unit_id' => 'most_common_unit_id',
    'most_common_value' => 'most_common_value',
    'number_of_unique_daily_values' => 'number_of_unique_daily_values',
    'number_of_changes' => 'number_of_changes',
    'skewness' => 'skewness',
    'kurtosis' => 'kurtosis',
    'latitude' => 'latitude',
    'longitude' => 'longitude',
    'location' => 'location',
    'created_at' => 'created_at',
    'updated_at' => 'updated_at',
    'outcome' => 'outcome',
    'sources' => 'sources',
    'earliest_source_time' => 'earliest_source_time',
    'latest_source_time' => 'latest_source_time',
    'earliest_measurement_time' => 'earliest_measurement_time',
    'latest_measurement_time' => 'latest_measurement_time',
    'earliest_filling_time' => 'earliest_filling_time',
    'latest_filling_time' => 'latest_filling_time'
};

# new object
sub new { 
    my ($class, %args) = @_; 
    my $self = { 
        #ID of the parent variable if this variable has any parent
        'parent_id' => $args{'parent_id'}, 
        #client_id
        'client_id' => $args{'client_id'}, 
        #ID of variable
        'variable_id' => $args{'variable_id'}, 
        #ID of unit to use for this variable
        'default_unit_id' => $args{'default_unit_id'}, 
        #Minimum reasonable value for this variable (uses default unit)
        'minimum_allowed_value' => $args{'minimum_allowed_value'}, 
        #Maximum reasonable value for this variable (uses default unit)
        'maximum_allowed_value' => $args{'maximum_allowed_value'}, 
        #Value for replacing null measurements
        'filling_value' => $args{'filling_value'}, 
        #The Variable this Variable should be joined with. If the variable is joined with some other variable then it is not shown to user in the list of variables
        'join_with' => $args{'join_with'}, 
        #How long it takes for a measurement in this variable to take effect
        'onset_delay' => $args{'onset_delay'}, 
        #Estimated duration of time following the onset delay in which a stimulus produces a perceivable effect
        'duration_of_action' => $args{'duration_of_action'}, 
        #ID of variable category
        'variable_category_id' => $args{'variable_category_id'}, 
        #updated
        'updated' => $args{'updated'}, 
        #Is variable public
        'public' => $args{'public'}, 
        #A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user
        'cause_only' => $args{'cause_only'}, 
        #0 -> No filling, 1 -> Use filling-value
        'filling_type' => $args{'filling_type'}, 
        #Number of measurements
        'number_of_measurements' => $args{'number_of_measurements'}, 
        #Number of processed measurements
        'number_of_processed_measurements' => $args{'number_of_processed_measurements'}, 
        #Number of measurements at last analysis
        'measurements_at_last_analysis' => $args{'measurements_at_last_analysis'}, 
        #ID of last Unit
        'last_unit_id' => $args{'last_unit_id'}, 
        #ID of last original Unit
        'last_original_unit_id' => $args{'last_original_unit_id'}, 
        #Last Value
        'last_value' => $args{'last_value'}, 
        #Last original value which is stored
        'last_original_value' => $args{'last_original_value'}, 
        #ID of last source
        'last_source_id' => $args{'last_source_id'}, 
        #Number of correlations for this variable
        'number_of_correlations' => $args{'number_of_correlations'}, 
        #status
        'status' => $args{'status'}, 
        #error_message
        'error_message' => $args{'error_message'}, 
        #When this variable or its settings were last updated
        'last_successful_update_time' => $args{'last_successful_update_time'}, 
        #Standard deviation
        'standard_deviation' => $args{'standard_deviation'}, 
        #Variance
        'variance' => $args{'variance'}, 
        #Minimum recorded daily value of this variable
        'minimum_recorded_daily_value' => $args{'minimum_recorded_daily_value'}, 
        #Maximum recorded daily value of this variable
        'maximum_recorded_daily_value' => $args{'maximum_recorded_daily_value'}, 
        #Mean
        'mean' => $args{'mean'}, 
        #Median
        'median' => $args{'median'}, 
        #Most common Unit ID
        'most_common_unit_id' => $args{'most_common_unit_id'}, 
        #Most common value
        'most_common_value' => $args{'most_common_value'}, 
        #Number of unique daily values
        'number_of_unique_daily_values' => $args{'number_of_unique_daily_values'}, 
        #Number of changes
        'number_of_changes' => $args{'number_of_changes'}, 
        #Skewness
        'skewness' => $args{'skewness'}, 
        #Kurtosis
        'kurtosis' => $args{'kurtosis'}, 
        #Latitude
        'latitude' => $args{'latitude'}, 
        #Longitude
        'longitude' => $args{'longitude'}, 
        #Location
        'location' => $args{'location'}, 
        #created_at
        'created_at' => $args{'created_at'}, 
        #updated_at
        'updated_at' => $args{'updated_at'}, 
        #Outcome variables (those with `outcome` == 1) are variables for which a human would generally want to identify the influencing factors.  These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables
        'outcome' => $args{'outcome'}, 
        #Comma-separated list of source names to limit variables to those sources
        'sources' => $args{'sources'}, 
        #Earliest source time
        'earliest_source_time' => $args{'earliest_source_time'}, 
        #Latest source time
        'latest_source_time' => $args{'latest_source_time'}, 
        #Earliest measurement time
        'earliest_measurement_time' => $args{'earliest_measurement_time'}, 
        #Latest measurement time
        'latest_measurement_time' => $args{'latest_measurement_time'}, 
        #Earliest filling time
        'earliest_filling_time' => $args{'earliest_filling_time'}, 
        #Latest filling time
        'latest_filling_time' => $args{'latest_filling_time'}
    }; 

    return bless $self, $class; 
}  

# get swagger type of the attribute
sub get_swagger_types {
    return $swagger_types;
}

# get attribute mappping
sub get_attribute_map {
    return $attribute_map;
}

1;
