package WWW::SwaggerClient::Object::Variable;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use base ("Class::Accessor", "Class::Data::Inheritable");


#
#
#
#NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
#

__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('swagger_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new object
sub new { 
    my ($class, %args) = @_; 

	my $self = bless {}, $class;
	
	foreach my $attribute (keys %{$class->attribute_map}) {
		my $args_key = $class->attribute_map->{$attribute};
		$self->$attribute( $args{ $args_key } );
	}
	
	return $self;
}  

# return perl hash
sub to_hash {
    return decode_json(JSON->new->convert_blessed->encode( shift ));
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }
    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use swagger_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->swagger_types} ) {
    	my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[/i) { # array
            my $_subclass = substr($_type, 6, -1);
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
        	$log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);
        
    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "WWW::SwaggerClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => '',
                                  class => 'Variable',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'id' => {
    	datatype => 'int',
    	base_name => 'id',
    	description => 'id',
    	format => '',
    	read_only => '',
    		},
    'client_id' => {
    	datatype => 'string',
    	base_name => 'client_id',
    	description => 'client_id',
    	format => '',
    	read_only => '',
    		},
    'parent_id' => {
    	datatype => 'int',
    	base_name => 'parent_id',
    	description => 'ID of the parent variable if this variable has any parent',
    	format => '',
    	read_only => '',
    		},
    'name' => {
    	datatype => 'string',
    	base_name => 'name',
    	description => 'User-defined variable display name',
    	format => '',
    	read_only => '',
    		},
    'variable_category_id' => {
    	datatype => 'int',
    	base_name => 'variable_category_id',
    	description => 'Variable category ID',
    	format => '',
    	read_only => '',
    		},
    'default_unit_id' => {
    	datatype => 'int',
    	base_name => 'default_unit_id',
    	description => 'ID of the default unit of measurement to use for this variable',
    	format => '',
    	read_only => '',
    		},
    'combination_operation' => {
    	datatype => 'string',
    	base_name => 'combination_operation',
    	description => 'How to combine values of this variable (for instance, to see a summary of the values over a month) SUM or MEAN',
    	format => '',
    	read_only => '',
    		},
    'filling_value' => {
    	datatype => 'double',
    	base_name => 'filling_value',
    	description => 'Value for replacing null measurements',
    	format => '',
    	read_only => '',
    		},
    'maximum_allowed_value' => {
    	datatype => 'double',
    	base_name => 'maximum_allowed_value',
    	description => 'Maximum reasonable value for this variable (uses default unit)',
    	format => '',
    	read_only => '',
    		},
    'minimum_allowed_value' => {
    	datatype => 'double',
    	base_name => 'minimum_allowed_value',
    	description => 'Minimum reasonable value for this variable (uses default unit)',
    	format => '',
    	read_only => '',
    		},
    'onset_delay' => {
    	datatype => 'int',
    	base_name => 'onset_delay',
    	description => 'How long it takes for a measurement in this variable to take effect',
    	format => '',
    	read_only => '',
    		},
    'duration_of_action' => {
    	datatype => 'int',
    	base_name => 'duration_of_action',
    	description => 'How long the effect of a measurement in this variable lasts',
    	format => '',
    	read_only => '',
    		},
    'public' => {
    	datatype => 'int',
    	base_name => 'public',
    	description => 'Is variable public',
    	format => '',
    	read_only => '',
    		},
    'cause_only' => {
    	datatype => 'boolean',
    	base_name => 'cause_only',
    	description => 'A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user',
    	format => '',
    	read_only => '',
    		},
    'most_common_value' => {
    	datatype => 'double',
    	base_name => 'most_common_value',
    	description => 'Most common value',
    	format => '',
    	read_only => '',
    		},
    'most_common_unit_id' => {
    	datatype => 'int',
    	base_name => 'most_common_unit_id',
    	description => 'Most common Unit',
    	format => '',
    	read_only => '',
    		},
    'standard_deviation' => {
    	datatype => 'double',
    	base_name => 'standard_deviation',
    	description => 'Standard Deviation',
    	format => '',
    	read_only => '',
    		},
    'variance' => {
    	datatype => 'double',
    	base_name => 'variance',
    	description => 'Variance',
    	format => '',
    	read_only => '',
    		},
    'mean' => {
    	datatype => 'double',
    	base_name => 'mean',
    	description => 'Mean',
    	format => '',
    	read_only => '',
    		},
    'median' => {
    	datatype => 'double',
    	base_name => 'median',
    	description => 'Median',
    	format => '',
    	read_only => '',
    		},
    'number_of_measurements' => {
    	datatype => 'double',
    	base_name => 'number_of_measurements',
    	description => 'Number of measurements',
    	format => '',
    	read_only => '',
    		},
    'number_of_unique_values' => {
    	datatype => 'double',
    	base_name => 'number_of_unique_values',
    	description => 'Number of unique values',
    	format => '',
    	read_only => '',
    		},
    'skewness' => {
    	datatype => 'double',
    	base_name => 'skewness',
    	description => 'Skewness',
    	format => '',
    	read_only => '',
    		},
    'kurtosis' => {
    	datatype => 'double',
    	base_name => 'kurtosis',
    	description => 'Kurtosis',
    	format => '',
    	read_only => '',
    		},
    'status' => {
    	datatype => 'string',
    	base_name => 'status',
    	description => 'status',
    	format => '',
    	read_only => '',
    		},
    'error_message' => {
    	datatype => 'string',
    	base_name => 'error_message',
    	description => 'error_message',
    	format => '',
    	read_only => '',
    		},
    'last_successful_update_time' => {
    	datatype => 'DateTime',
    	base_name => 'last_successful_update_time',
    	description => 'When this variable or its settings were last updated',
    	format => '',
    	read_only => '',
    		},
    'created_at' => {
    	datatype => 'DateTime',
    	base_name => 'created_at',
    	description => 'When the record was first created. Use ISO 8601 datetime format',
    	format => '',
    	read_only => '',
    		},
    'updated_at' => {
    	datatype => 'DateTime',
    	base_name => 'updated_at',
    	description => 'When the record in the database was last updated. Use ISO 8601 datetime format',
    	format => '',
    	read_only => '',
    		},
    'product_url' => {
    	datatype => 'string',
    	base_name => 'product_url',
    	description => 'Product URL',
    	format => '',
    	read_only => '',
    		},
    'image_url' => {
    	datatype => 'string',
    	base_name => 'image_url',
    	description => 'Image URL',
    	format => '',
    	read_only => '',
    		},
    'price' => {
    	datatype => 'double',
    	base_name => 'price',
    	description => 'Price',
    	format => '',
    	read_only => '',
    		},
    'number_of_user_variables' => {
    	datatype => 'int',
    	base_name => 'number_of_user_variables',
    	description => 'Number of variables',
    	format => '',
    	read_only => '',
    		},
    'outcome' => {
    	datatype => 'boolean',
    	base_name => 'outcome',
    	description => 'Outcome variables (those with `outcome` == 1) are variables for which a human would generally want to identify the influencing factors.  These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables.',
    	format => '',
    	read_only => '',
    		},
    'minimum_recorded_value' => {
    	datatype => 'double',
    	base_name => 'minimum_recorded_value',
    	description => 'Minimum recorded value of this variable',
    	format => '',
    	read_only => '',
    		},
    'maximum_recorded_value' => {
    	datatype => 'double',
    	base_name => 'maximum_recorded_value',
    	description => 'Maximum recorded value of this variable',
    	format => '',
    	read_only => '',
    		},
    
});

__PACKAGE__->swagger_types( {
    'id' => 'int',
    'client_id' => 'string',
    'parent_id' => 'int',
    'name' => 'string',
    'variable_category_id' => 'int',
    'default_unit_id' => 'int',
    'combination_operation' => 'string',
    'filling_value' => 'double',
    'maximum_allowed_value' => 'double',
    'minimum_allowed_value' => 'double',
    'onset_delay' => 'int',
    'duration_of_action' => 'int',
    'public' => 'int',
    'cause_only' => 'boolean',
    'most_common_value' => 'double',
    'most_common_unit_id' => 'int',
    'standard_deviation' => 'double',
    'variance' => 'double',
    'mean' => 'double',
    'median' => 'double',
    'number_of_measurements' => 'double',
    'number_of_unique_values' => 'double',
    'skewness' => 'double',
    'kurtosis' => 'double',
    'status' => 'string',
    'error_message' => 'string',
    'last_successful_update_time' => 'DateTime',
    'created_at' => 'DateTime',
    'updated_at' => 'DateTime',
    'product_url' => 'string',
    'image_url' => 'string',
    'price' => 'double',
    'number_of_user_variables' => 'int',
    'outcome' => 'boolean',
    'minimum_recorded_value' => 'double',
    'maximum_recorded_value' => 'double'
} );

__PACKAGE__->attribute_map( {
    'id' => 'id',
    'client_id' => 'client_id',
    'parent_id' => 'parent_id',
    'name' => 'name',
    'variable_category_id' => 'variable_category_id',
    'default_unit_id' => 'default_unit_id',
    'combination_operation' => 'combination_operation',
    'filling_value' => 'filling_value',
    'maximum_allowed_value' => 'maximum_allowed_value',
    'minimum_allowed_value' => 'minimum_allowed_value',
    'onset_delay' => 'onset_delay',
    'duration_of_action' => 'duration_of_action',
    'public' => 'public',
    'cause_only' => 'cause_only',
    'most_common_value' => 'most_common_value',
    'most_common_unit_id' => 'most_common_unit_id',
    'standard_deviation' => 'standard_deviation',
    'variance' => 'variance',
    'mean' => 'mean',
    'median' => 'median',
    'number_of_measurements' => 'number_of_measurements',
    'number_of_unique_values' => 'number_of_unique_values',
    'skewness' => 'skewness',
    'kurtosis' => 'kurtosis',
    'status' => 'status',
    'error_message' => 'error_message',
    'last_successful_update_time' => 'last_successful_update_time',
    'created_at' => 'created_at',
    'updated_at' => 'updated_at',
    'product_url' => 'product_url',
    'image_url' => 'image_url',
    'price' => 'price',
    'number_of_user_variables' => 'number_of_user_variables',
    'outcome' => 'outcome',
    'minimum_recorded_value' => 'minimum_recorded_value',
    'maximum_recorded_value' => 'maximum_recorded_value'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
