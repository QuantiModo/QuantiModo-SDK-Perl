package WWW::SwaggerClient::Object::UserVariableRelationship;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use base ("Class::Accessor", "Class::Data::Inheritable");


#
#
#
#NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
#

__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('swagger_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new object
sub new { 
    my ($class, %args) = @_; 

	my $self = bless {}, $class;
	
	foreach my $attribute (keys %{$class->attribute_map}) {
		my $args_key = $class->attribute_map->{$attribute};
		$self->$attribute( $args{ $args_key } );
	}
	
	return $self;
}  

# return perl hash
sub to_hash {
    return decode_json(JSON->new->convert_blessed->encode( shift ));
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }
    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use swagger_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->swagger_types} ) {
    	my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[/i) { # array
            my $_subclass = substr($_type, 6, -1);
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
        	$log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);
        
    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "WWW::SwaggerClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => '',
                                  class => 'UserVariableRelationship',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'id' => {
    	datatype => 'int',
    	base_name => 'id',
    	description => 'id',
    	format => '',
    	read_only => '',
    		},
    'confidence_level' => {
    	datatype => 'string',
    	base_name => 'confidence_level',
    	description => 'Our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors',
    	format => '',
    	read_only => '',
    		},
    'confidence_score' => {
    	datatype => 'double',
    	base_name => 'confidence_score',
    	description => 'A quantitative representation of our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors',
    	format => '',
    	read_only => '',
    		},
    'direction' => {
    	datatype => 'string',
    	base_name => 'direction',
    	description => 'Direction is positive if higher predictor values generally precede higher outcome values. Direction is negative if higher predictor values generally precede lower outcome values.',
    	format => '',
    	read_only => '',
    		},
    'duration_of_action' => {
    	datatype => 'int',
    	base_name => 'duration_of_action',
    	description => 'Number of seconds over which the predictor variable event is expected to produce a perceivable effect following the onset delay',
    	format => '',
    	read_only => '',
    		},
    'error_message' => {
    	datatype => 'string',
    	base_name => 'error_message',
    	description => 'error_message',
    	format => '',
    	read_only => '',
    		},
    'onset_delay' => {
    	datatype => 'int',
    	base_name => 'onset_delay',
    	description => 'User estimated (or default number of seconds) after cause measurement before a perceivable effect is observed',
    	format => '',
    	read_only => '',
    		},
    'outcome_variable_id' => {
    	datatype => 'int',
    	base_name => 'outcome_variable_id',
    	description => 'Variable ID for the outcome variable',
    	format => '',
    	read_only => '',
    		},
    'predictor_variable_id' => {
    	datatype => 'int',
    	base_name => 'predictor_variable_id',
    	description => 'Variable ID for the predictor variable',
    	format => '',
    	read_only => '',
    		},
    'predictor_unit_id' => {
    	datatype => 'int',
    	base_name => 'predictor_unit_id',
    	description => 'ID for default unit of the predictor variable',
    	format => '',
    	read_only => '',
    		},
    'sinn_rank' => {
    	datatype => 'double',
    	base_name => 'sinn_rank',
    	description => 'A value representative of the relevance of this predictor relative to other predictors of this outcome.  Usually used for relevancy sorting.',
    	format => '',
    	read_only => '',
    		},
    'strength_level' => {
    	datatype => 'string',
    	base_name => 'strength_level',
    	description => 'Can be weak, medium, or strong based on the size of the effect which the predictor appears to have on the outcome relative to other variable relationship strength scores.',
    	format => '',
    	read_only => '',
    		},
    'strength_score' => {
    	datatype => 'double',
    	base_name => 'strength_score',
    	description => 'A value represented to the size of the effect which the predictor appears to have on the outcome.',
    	format => '',
    	read_only => '',
    		},
    'user_id' => {
    	datatype => 'int',
    	base_name => 'user_id',
    	description => 'user_id',
    	format => '',
    	read_only => '',
    		},
    'vote' => {
    	datatype => 'string',
    	base_name => 'vote',
    	description => 'vote',
    	format => '',
    	read_only => '',
    		},
    'value_predicting_high_outcome' => {
    	datatype => 'double',
    	base_name => 'value_predicting_high_outcome',
    	description => 'Value for the predictor variable (in it&#39;s default unit) which typically precedes an above average outcome value',
    	format => '',
    	read_only => '',
    		},
    'value_predicting_low_outcome' => {
    	datatype => 'double',
    	base_name => 'value_predicting_low_outcome',
    	description => 'Value for the predictor variable (in it&#39;s default unit) which typically precedes a below average outcome value',
    	format => '',
    	read_only => '',
    		},
    
});

__PACKAGE__->swagger_types( {
    'id' => 'int',
    'confidence_level' => 'string',
    'confidence_score' => 'double',
    'direction' => 'string',
    'duration_of_action' => 'int',
    'error_message' => 'string',
    'onset_delay' => 'int',
    'outcome_variable_id' => 'int',
    'predictor_variable_id' => 'int',
    'predictor_unit_id' => 'int',
    'sinn_rank' => 'double',
    'strength_level' => 'string',
    'strength_score' => 'double',
    'user_id' => 'int',
    'vote' => 'string',
    'value_predicting_high_outcome' => 'double',
    'value_predicting_low_outcome' => 'double'
} );

__PACKAGE__->attribute_map( {
    'id' => 'id',
    'confidence_level' => 'confidence_level',
    'confidence_score' => 'confidence_score',
    'direction' => 'direction',
    'duration_of_action' => 'duration_of_action',
    'error_message' => 'error_message',
    'onset_delay' => 'onset_delay',
    'outcome_variable_id' => 'outcome_variable_id',
    'predictor_variable_id' => 'predictor_variable_id',
    'predictor_unit_id' => 'predictor_unit_id',
    'sinn_rank' => 'sinn_rank',
    'strength_level' => 'strength_level',
    'strength_score' => 'strength_score',
    'user_id' => 'user_id',
    'vote' => 'vote',
    'value_predicting_high_outcome' => 'value_predicting_high_outcome',
    'value_predicting_low_outcome' => 'value_predicting_low_outcome'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
