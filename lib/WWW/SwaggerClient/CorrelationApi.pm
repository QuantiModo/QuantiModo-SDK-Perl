#
# Copyright 2016 SmartBear Software
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
#
package WWW::SwaggerClient::CorrelationApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# correlations_get
#
# Get all Correlations
# 
# @param string $access_token User&#39;s OAuth2 access token (optional)
# @param int $timestamp Time at which correlation was calculated (optional)
# @param int $user_id ID of user that owns this correlation (optional)
# @param number $correlation Pearson correlation coefficient between cause and effect measurements (optional)
# @param int $cause_id variable ID of the predictor variable for which the user desires correlations (optional)
# @param int $effect_id variable ID of the outcome variable for which the user desires correlations (optional)
# @param int $onset_delay User estimated or default time after cause measurement before a perceivable effect is observed (optional)
# @param int $duration_of_action Time over which the cause is expected to produce a perceivable effect following the onset delay (optional)
# @param int $number_of_pairs Number of points that went into the correlation calculation (optional)
# @param number $value_predicting_high_outcome cause value that predicts an above average effect value (in default unit for predictor variable) (optional)
# @param number $value_predicting_low_outcome cause value that predicts a below average effect value (in default unit for predictor variable) (optional)
# @param number $optimal_pearson_product Optimal Pearson Product (optional)
# @param number $vote Vote (optional)
# @param number $statistical_significance A function of the effect size and sample size (optional)
# @param string $cause_unit Unit of the predictor variable (optional)
# @param int $cause_unit_id Unit ID of the predictor variable (optional)
# @param int $cause_changes Cause changes (optional)
# @param int $effect_changes Effect changes (optional)
# @param number $qm_score QM Score (optional)
# @param string $error error (optional)
# @param string $created_at When the record was first created. Use ISO 8601 datetime format (optional)
# @param string $updated_at When the record in the database was last updated. Use ISO 8601 datetime format (optional)
# @param number $reverse_pearson_correlation_coefficient Correlation when cause and effect are reversed. For any causal relationship, the forward correlation should exceed the reverse correlation (optional)
# @param number $predictive_pearson_correlation_coefficient Predictive Pearson Correlation Coefficient (optional)
# @param int $limit Limit the number of results returned (optional)
# @param int $offset Records from give Offset (optional)
# @param string $sort Sort records by given field (optional)
{
    my $params = {
    'access_token' => {
        data_type => 'string',
        description => 'User&#39;s OAuth2 access token',
        required => '0',
    },
    'timestamp' => {
        data_type => 'int',
        description => 'Time at which correlation was calculated',
        required => '0',
    },
    'user_id' => {
        data_type => 'int',
        description => 'ID of user that owns this correlation',
        required => '0',
    },
    'correlation' => {
        data_type => 'number',
        description => 'Pearson correlation coefficient between cause and effect measurements',
        required => '0',
    },
    'cause_id' => {
        data_type => 'int',
        description => 'variable ID of the predictor variable for which the user desires correlations',
        required => '0',
    },
    'effect_id' => {
        data_type => 'int',
        description => 'variable ID of the outcome variable for which the user desires correlations',
        required => '0',
    },
    'onset_delay' => {
        data_type => 'int',
        description => 'User estimated or default time after cause measurement before a perceivable effect is observed',
        required => '0',
    },
    'duration_of_action' => {
        data_type => 'int',
        description => 'Time over which the cause is expected to produce a perceivable effect following the onset delay',
        required => '0',
    },
    'number_of_pairs' => {
        data_type => 'int',
        description => 'Number of points that went into the correlation calculation',
        required => '0',
    },
    'value_predicting_high_outcome' => {
        data_type => 'number',
        description => 'cause value that predicts an above average effect value (in default unit for predictor variable)',
        required => '0',
    },
    'value_predicting_low_outcome' => {
        data_type => 'number',
        description => 'cause value that predicts a below average effect value (in default unit for predictor variable)',
        required => '0',
    },
    'optimal_pearson_product' => {
        data_type => 'number',
        description => 'Optimal Pearson Product',
        required => '0',
    },
    'vote' => {
        data_type => 'number',
        description => 'Vote',
        required => '0',
    },
    'statistical_significance' => {
        data_type => 'number',
        description => 'A function of the effect size and sample size',
        required => '0',
    },
    'cause_unit' => {
        data_type => 'string',
        description => 'Unit of the predictor variable',
        required => '0',
    },
    'cause_unit_id' => {
        data_type => 'int',
        description => 'Unit ID of the predictor variable',
        required => '0',
    },
    'cause_changes' => {
        data_type => 'int',
        description => 'Cause changes',
        required => '0',
    },
    'effect_changes' => {
        data_type => 'int',
        description => 'Effect changes',
        required => '0',
    },
    'qm_score' => {
        data_type => 'number',
        description => 'QM Score',
        required => '0',
    },
    'error' => {
        data_type => 'string',
        description => 'error',
        required => '0',
    },
    'created_at' => {
        data_type => 'string',
        description => 'When the record was first created. Use ISO 8601 datetime format',
        required => '0',
    },
    'updated_at' => {
        data_type => 'string',
        description => 'When the record in the database was last updated. Use ISO 8601 datetime format',
        required => '0',
    },
    'reverse_pearson_correlation_coefficient' => {
        data_type => 'number',
        description => 'Correlation when cause and effect are reversed. For any causal relationship, the forward correlation should exceed the reverse correlation',
        required => '0',
    },
    'predictive_pearson_correlation_coefficient' => {
        data_type => 'number',
        description => 'Predictive Pearson Correlation Coefficient',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Limit the number of results returned',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'Records from give Offset',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Sort records by given field',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ correlations_get } = { 
    	summary => 'Get all Correlations',
        params => $params,
        returns => 'inline_response_200_17',
        };
}
# @return inline_response_200_17
#
sub correlations_get {
    my ($self, %args) = @_;

    

    # parse inputs
    my $_resource_path = '/correlations';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'access_token'}) {
        $query_params->{'access_token'} = $self->{api_client}->to_query_value($args{'access_token'});
    }# query params
    if ( exists $args{'timestamp'}) {
        $query_params->{'timestamp'} = $self->{api_client}->to_query_value($args{'timestamp'});
    }# query params
    if ( exists $args{'user_id'}) {
        $query_params->{'user_id'} = $self->{api_client}->to_query_value($args{'user_id'});
    }# query params
    if ( exists $args{'correlation'}) {
        $query_params->{'correlation'} = $self->{api_client}->to_query_value($args{'correlation'});
    }# query params
    if ( exists $args{'cause_id'}) {
        $query_params->{'cause_id'} = $self->{api_client}->to_query_value($args{'cause_id'});
    }# query params
    if ( exists $args{'effect_id'}) {
        $query_params->{'effect_id'} = $self->{api_client}->to_query_value($args{'effect_id'});
    }# query params
    if ( exists $args{'onset_delay'}) {
        $query_params->{'onset_delay'} = $self->{api_client}->to_query_value($args{'onset_delay'});
    }# query params
    if ( exists $args{'duration_of_action'}) {
        $query_params->{'duration_of_action'} = $self->{api_client}->to_query_value($args{'duration_of_action'});
    }# query params
    if ( exists $args{'number_of_pairs'}) {
        $query_params->{'number_of_pairs'} = $self->{api_client}->to_query_value($args{'number_of_pairs'});
    }# query params
    if ( exists $args{'value_predicting_high_outcome'}) {
        $query_params->{'value_predicting_high_outcome'} = $self->{api_client}->to_query_value($args{'value_predicting_high_outcome'});
    }# query params
    if ( exists $args{'value_predicting_low_outcome'}) {
        $query_params->{'value_predicting_low_outcome'} = $self->{api_client}->to_query_value($args{'value_predicting_low_outcome'});
    }# query params
    if ( exists $args{'optimal_pearson_product'}) {
        $query_params->{'optimal_pearson_product'} = $self->{api_client}->to_query_value($args{'optimal_pearson_product'});
    }# query params
    if ( exists $args{'vote'}) {
        $query_params->{'vote'} = $self->{api_client}->to_query_value($args{'vote'});
    }# query params
    if ( exists $args{'statistical_significance'}) {
        $query_params->{'statistical_significance'} = $self->{api_client}->to_query_value($args{'statistical_significance'});
    }# query params
    if ( exists $args{'cause_unit'}) {
        $query_params->{'cause_unit'} = $self->{api_client}->to_query_value($args{'cause_unit'});
    }# query params
    if ( exists $args{'cause_unit_id'}) {
        $query_params->{'cause_unit_id'} = $self->{api_client}->to_query_value($args{'cause_unit_id'});
    }# query params
    if ( exists $args{'cause_changes'}) {
        $query_params->{'cause_changes'} = $self->{api_client}->to_query_value($args{'cause_changes'});
    }# query params
    if ( exists $args{'effect_changes'}) {
        $query_params->{'effect_changes'} = $self->{api_client}->to_query_value($args{'effect_changes'});
    }# query params
    if ( exists $args{'qm_score'}) {
        $query_params->{'qm_score'} = $self->{api_client}->to_query_value($args{'qm_score'});
    }# query params
    if ( exists $args{'error'}) {
        $query_params->{'error'} = $self->{api_client}->to_query_value($args{'error'});
    }# query params
    if ( exists $args{'created_at'}) {
        $query_params->{'created_at'} = $self->{api_client}->to_query_value($args{'created_at'});
    }# query params
    if ( exists $args{'updated_at'}) {
        $query_params->{'updated_at'} = $self->{api_client}->to_query_value($args{'updated_at'});
    }# query params
    if ( exists $args{'reverse_pearson_correlation_coefficient'}) {
        $query_params->{'reverse_pearson_correlation_coefficient'} = $self->{api_client}->to_query_value($args{'reverse_pearson_correlation_coefficient'});
    }# query params
    if ( exists $args{'predictive_pearson_correlation_coefficient'}) {
        $query_params->{'predictive_pearson_correlation_coefficient'} = $self->{api_client}->to_query_value($args{'predictive_pearson_correlation_coefficient'});
    }# query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }# query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }# query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }
    
    
    
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = [qw(quantimodo_oauth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('inline_response_200_17', $response);
    return $_response_object;
    
}

#
# correlations_post
#
# Store Correlation
# 
# @param string $access_token User&#39;s OAuth2 access token (optional)
# @param Correlation $body Correlation that should be stored (optional)
{
    my $params = {
    'access_token' => {
        data_type => 'string',
        description => 'User&#39;s OAuth2 access token',
        required => '0',
    },
    'body' => {
        data_type => 'Correlation',
        description => 'Correlation that should be stored',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ correlations_post } = { 
    	summary => 'Store Correlation',
        params => $params,
        returns => 'inline_response_200_18',
        };
}
# @return inline_response_200_18
#
sub correlations_post {
    my ($self, %args) = @_;

    

    # parse inputs
    my $_resource_path = '/correlations';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'access_token'}) {
        $query_params->{'access_token'} = $self->{api_client}->to_query_value($args{'access_token'});
    }
    
    
    
    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(quantimodo_oauth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('inline_response_200_18', $response);
    return $_response_object;
    
}

#
# correlations_id_get
#
# Get Correlation Details
# 
# @param int $id id of Correlation (required)
# @param string $access_token User&#39;s OAuth2 access token (optional)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'id of Correlation',
        required => '1',
    },
    'access_token' => {
        data_type => 'string',
        description => 'User&#39;s OAuth2 access token',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ correlations_id_get } = { 
    	summary => 'Get Correlation Details',
        params => $params,
        returns => 'inline_response_200_18',
        };
}
# @return inline_response_200_18
#
sub correlations_id_get {
    my ($self, %args) = @_;

    
    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling correlations_id_get");
    }
    

    # parse inputs
    my $_resource_path = '/correlations/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'access_token'}) {
        $query_params->{'access_token'} = $self->{api_client}->to_query_value($args{'access_token'});
    }
    
    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }
    
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = [qw(quantimodo_oauth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('inline_response_200_18', $response);
    return $_response_object;
    
}

#
# correlations_id_put
#
# Update Correlation
# 
# @param int $id id of Correlation (required)
# @param string $access_token User&#39;s OAuth2 access token (optional)
# @param Correlation $body Correlation that should be updated (optional)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'id of Correlation',
        required => '1',
    },
    'access_token' => {
        data_type => 'string',
        description => 'User&#39;s OAuth2 access token',
        required => '0',
    },
    'body' => {
        data_type => 'Correlation',
        description => 'Correlation that should be updated',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ correlations_id_put } = { 
    	summary => 'Update Correlation',
        params => $params,
        returns => 'inline_response_200_2',
        };
}
# @return inline_response_200_2
#
sub correlations_id_put {
    my ($self, %args) = @_;

    
    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling correlations_id_put");
    }
    

    # parse inputs
    my $_resource_path = '/correlations/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'access_token'}) {
        $query_params->{'access_token'} = $self->{api_client}->to_query_value($args{'access_token'});
    }
    
    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }
    
    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(quantimodo_oauth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('inline_response_200_2', $response);
    return $_response_object;
    
}

#
# correlations_id_delete
#
# Delete Correlation
# 
# @param int $id id of Correlation (required)
# @param string $access_token User&#39;s OAuth2 access token (optional)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'id of Correlation',
        required => '1',
    },
    'access_token' => {
        data_type => 'string',
        description => 'User&#39;s OAuth2 access token',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ correlations_id_delete } = { 
    	summary => 'Delete Correlation',
        params => $params,
        returns => 'inline_response_200_2',
        };
}
# @return inline_response_200_2
#
sub correlations_id_delete {
    my ($self, %args) = @_;

    
    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling correlations_id_delete");
    }
    

    # parse inputs
    my $_resource_path = '/correlations/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'access_token'}) {
        $query_params->{'access_token'} = $self->{api_client}->to_query_value($args{'access_token'});
    }
    
    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }
    
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = [qw(quantimodo_oauth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('inline_response_200_2', $response);
    return $_response_object;
    
}


1;
