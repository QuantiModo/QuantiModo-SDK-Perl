#
# Copyright 2015 SmartBear Software
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
#
package WWW::SwaggerClient::CorrelationApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

sub new {
    my $class   = shift;
    my $default_api_client = $WWW::SwaggerClient::Configuration::api_client ? $WWW::SwaggerClient::Configuration::api_client  : WWW::SwaggerClient::ApiClient->new;
    my (%self) = (
        'api_client' => $default_api_client,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}

#
# correlations_get
#
# Get all Correlations
# 
# @param int $timestamp timestamp (optional)
# @param int $user_id user_id (optional)
# @param number $correlation correlation (optional)
# @param int $cause_id cause_id (optional)
# @param int $effect_id effect_id (optional)
# @param int $onset_delay onset_delay (optional)
# @param int $duration_of_action duration_of_action (optional)
# @param int $number_of_pairs number_of_pairs (optional)
# @param number $value_predicting_high_outcome value_predicting_high_outcome (optional)
# @param number $value_predicting_low_outcome value_predicting_low_outcome (optional)
# @param number $optimal_pearson_product optimal_pearson_product (optional)
# @param number $vote vote (optional)
# @param number $statistical_significance statistical_significance (optional)
# @param string $cause_unit cause_unit (optional)
# @param int $cause_unit_id cause_unit_id (optional)
# @param int $cause_changes cause_changes (optional)
# @param int $effect_changes effect_changes (optional)
# @param number $qm_score qm_score (optional)
# @param string $error error (optional)
# @param string $created_at created_at (optional)
# @param string $updated_at updated_at (optional)
# @param number $reverse_pearson_correlation_coefficient reverse_pearson_correlation_coefficient (optional)
# @param number $predictive_pearson_correlation_coefficient predictive_pearson_correlation_coefficient (optional)
# @param int $limit limit (optional)
# @param int $offset offset (optional)
# @param string $sort sort (optional)
# @return inline_response_200_7
#
sub correlations_get {
    my ($self, %args) = @_;

    

    # parse inputs
    my $_resource_path = '/correlations';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'timestamp'}) {
        $query_params->{'timestamp'} = $self->{api_client}->to_query_value($args{'timestamp'});
    }# query params
    if ( exists $args{'user_id'}) {
        $query_params->{'user_id'} = $self->{api_client}->to_query_value($args{'user_id'});
    }# query params
    if ( exists $args{'correlation'}) {
        $query_params->{'correlation'} = $self->{api_client}->to_query_value($args{'correlation'});
    }# query params
    if ( exists $args{'cause_id'}) {
        $query_params->{'cause_id'} = $self->{api_client}->to_query_value($args{'cause_id'});
    }# query params
    if ( exists $args{'effect_id'}) {
        $query_params->{'effect_id'} = $self->{api_client}->to_query_value($args{'effect_id'});
    }# query params
    if ( exists $args{'onset_delay'}) {
        $query_params->{'onset_delay'} = $self->{api_client}->to_query_value($args{'onset_delay'});
    }# query params
    if ( exists $args{'duration_of_action'}) {
        $query_params->{'duration_of_action'} = $self->{api_client}->to_query_value($args{'duration_of_action'});
    }# query params
    if ( exists $args{'number_of_pairs'}) {
        $query_params->{'number_of_pairs'} = $self->{api_client}->to_query_value($args{'number_of_pairs'});
    }# query params
    if ( exists $args{'value_predicting_high_outcome'}) {
        $query_params->{'value_predicting_high_outcome'} = $self->{api_client}->to_query_value($args{'value_predicting_high_outcome'});
    }# query params
    if ( exists $args{'value_predicting_low_outcome'}) {
        $query_params->{'value_predicting_low_outcome'} = $self->{api_client}->to_query_value($args{'value_predicting_low_outcome'});
    }# query params
    if ( exists $args{'optimal_pearson_product'}) {
        $query_params->{'optimal_pearson_product'} = $self->{api_client}->to_query_value($args{'optimal_pearson_product'});
    }# query params
    if ( exists $args{'vote'}) {
        $query_params->{'vote'} = $self->{api_client}->to_query_value($args{'vote'});
    }# query params
    if ( exists $args{'statistical_significance'}) {
        $query_params->{'statistical_significance'} = $self->{api_client}->to_query_value($args{'statistical_significance'});
    }# query params
    if ( exists $args{'cause_unit'}) {
        $query_params->{'cause_unit'} = $self->{api_client}->to_query_value($args{'cause_unit'});
    }# query params
    if ( exists $args{'cause_unit_id'}) {
        $query_params->{'cause_unit_id'} = $self->{api_client}->to_query_value($args{'cause_unit_id'});
    }# query params
    if ( exists $args{'cause_changes'}) {
        $query_params->{'cause_changes'} = $self->{api_client}->to_query_value($args{'cause_changes'});
    }# query params
    if ( exists $args{'effect_changes'}) {
        $query_params->{'effect_changes'} = $self->{api_client}->to_query_value($args{'effect_changes'});
    }# query params
    if ( exists $args{'qm_score'}) {
        $query_params->{'qm_score'} = $self->{api_client}->to_query_value($args{'qm_score'});
    }# query params
    if ( exists $args{'error'}) {
        $query_params->{'error'} = $self->{api_client}->to_query_value($args{'error'});
    }# query params
    if ( exists $args{'created_at'}) {
        $query_params->{'created_at'} = $self->{api_client}->to_query_value($args{'created_at'});
    }# query params
    if ( exists $args{'updated_at'}) {
        $query_params->{'updated_at'} = $self->{api_client}->to_query_value($args{'updated_at'});
    }# query params
    if ( exists $args{'reverse_pearson_correlation_coefficient'}) {
        $query_params->{'reverse_pearson_correlation_coefficient'} = $self->{api_client}->to_query_value($args{'reverse_pearson_correlation_coefficient'});
    }# query params
    if ( exists $args{'predictive_pearson_correlation_coefficient'}) {
        $query_params->{'predictive_pearson_correlation_coefficient'} = $self->{api_client}->to_query_value($args{'predictive_pearson_correlation_coefficient'});
    }# query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }# query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }# query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }
    
    
    
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = [];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('inline_response_200_7', $response);
    return $_response_object;
    
}
#
# correlations_post
#
# Store Correlation
# 
# @param Correlation $body Correlation that should be stored (optional)
# @return inline_response_200_8
#
sub correlations_post {
    my ($self, %args) = @_;

    

    # parse inputs
    my $_resource_path = '/correlations';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    
    
    
    
    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('inline_response_200_8', $response);
    return $_response_object;
    
}
#
# correlations_id_get
#
# Get Correlation
# 
# @param int $id id of Correlation (required)
# @return inline_response_200_8
#
sub correlations_id_get {
    my ($self, %args) = @_;

    
    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling correlations_id_get");
    }
    

    # parse inputs
    my $_resource_path = '/correlations/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    
    
    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }
    
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = [];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('inline_response_200_8', $response);
    return $_response_object;
    
}
#
# correlations_id_put
#
# Update Correlation
# 
# @param int $id id of Correlation (required)
# @param Correlation $body Correlation that should be updated (optional)
# @return inline_response_200_2
#
sub correlations_id_put {
    my ($self, %args) = @_;

    
    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling correlations_id_put");
    }
    

    # parse inputs
    my $_resource_path = '/correlations/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    
    
    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }
    
    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('inline_response_200_2', $response);
    return $_response_object;
    
}
#
# correlations_id_delete
#
# Delete Correlation
# 
# @param int $id id of Correlation (required)
# @return inline_response_200_2
#
sub correlations_id_delete {
    my ($self, %args) = @_;

    
    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling correlations_id_delete");
    }
    

    # parse inputs
    my $_resource_path = '/correlations/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    
    
    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }
    
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = [];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('inline_response_200_2', $response);
    return $_response_object;
    
}


1;
