#
# Copyright 2015 SmartBear Software
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
#
package WWW::SwaggerClient::PairsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

sub new {
    my $class   = shift;
    my $default_api_client = $WWW::SwaggerClient::Configuration::api_client ? $WWW::SwaggerClient::Configuration::api_client  : WWW::SwaggerClient::ApiClient->new;
    my (%self) = (
        'api_client' => $default_api_client,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}

#
# pairs_get
#
# Get pairs
# 
# @param string $cause Original variable name for the explanatory or independent variable (required)
# @param string $effect Original variable name for the outcome or dependent variable (required)
# @param string $cause_source Name of data source that the cause measurements should come from (optional)
# @param string $cause_unit Abbreviated name for the unit cause measurements to be returned in (optional)
# @param string $delay Delay before onset of action (in seconds) from the cause variable settings. (optional)
# @param string $duration Duration of action (in seconds) from the cause variable settings. (optional)
# @param string $effect_source Name of data source that the effectmeasurements should come from (optional)
# @param string $effect_unit Abbreviated name for the unit effect measurements to be returned in (optional)
# @param string $end_time The most recent date (in epoch time) for which we should return measurements (optional)
# @param string $start_time The earliest date (in epoch time) for which we should return measurements (optional)
# @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. (optional)
# @param int $offset Now suppose you wanted to show results 11-20. You&#39;d set the offset to 10 and the limit to 10. (optional)
# @param int $sort Sort by given field. If the field is prefixed with `-, it will sort in descending order. (optional)
# @return ARRAY[Pairs]
#
sub pairs_get {
    my ($self, %args) = @_;

    
    # verify the required parameter 'cause' is set
    unless (exists $args{'cause'}) {
      croak("Missing the required parameter 'cause' when calling pairs_get");
    }
    
    # verify the required parameter 'effect' is set
    unless (exists $args{'effect'}) {
      croak("Missing the required parameter 'effect' when calling pairs_get");
    }
    

    # parse inputs
    my $_resource_path = '/pairs';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'cause'}) {
        $query_params->{'cause'} = $self->{api_client}->to_query_value($args{'cause'});
    }# query params
    if ( exists $args{'cause_source'}) {
        $query_params->{'causeSource'} = $self->{api_client}->to_query_value($args{'cause_source'});
    }# query params
    if ( exists $args{'cause_unit'}) {
        $query_params->{'causeUnit'} = $self->{api_client}->to_query_value($args{'cause_unit'});
    }# query params
    if ( exists $args{'delay'}) {
        $query_params->{'delay'} = $self->{api_client}->to_query_value($args{'delay'});
    }# query params
    if ( exists $args{'duration'}) {
        $query_params->{'duration'} = $self->{api_client}->to_query_value($args{'duration'});
    }# query params
    if ( exists $args{'effect'}) {
        $query_params->{'effect'} = $self->{api_client}->to_query_value($args{'effect'});
    }# query params
    if ( exists $args{'effect_source'}) {
        $query_params->{'effectSource'} = $self->{api_client}->to_query_value($args{'effect_source'});
    }# query params
    if ( exists $args{'effect_unit'}) {
        $query_params->{'effectUnit'} = $self->{api_client}->to_query_value($args{'effect_unit'});
    }# query params
    if ( exists $args{'end_time'}) {
        $query_params->{'endTime'} = $self->{api_client}->to_query_value($args{'end_time'});
    }# query params
    if ( exists $args{'start_time'}) {
        $query_params->{'startTime'} = $self->{api_client}->to_query_value($args{'start_time'});
    }# query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }# query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }# query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }
    
    
    
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = ['oauth2'];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[Pairs]', $response);
    return $_response_object;
    
}


1;
