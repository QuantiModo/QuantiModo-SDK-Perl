#
# Copyright 2015 SmartBear Software
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
#
package WWW::SwaggerClient::ConnectorsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

sub new {
    my $class   = shift;
    my $default_api_client = $WWW::SwaggerClient::Configuration::api_client ? $WWW::SwaggerClient::Configuration::api_client  : WWW::SwaggerClient::ApiClient->new;
    my (%self) = (
        'api_client' => $default_api_client,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}

#
# v1_connectors_list_get
#
# List of Connectors
# 
# @return ARRAY[Connector]
#
sub v1_connectors_list_get {
    my ($self, %args) = @_;

    

    # parse inputs
    my $_resource_path = '/v1/connectors/list';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    
    
    
    
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = ['oauth2'];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[Connector]', $response);
    return $_response_object;
    
}
#
# v1_connectors_connector_connect_get
#
# Obtain a token from 3rd party data source
# 
# @param string $connector Lowercase system name of the source application or device. Get a list of available connectors from the /connectors/list endpoint. (required)
# @return void
#
sub v1_connectors_connector_connect_get {
    my ($self, %args) = @_;

    
    # verify the required parameter 'connector' is set
    unless (exists $args{'connector'}) {
      croak("Missing the required parameter 'connector' when calling v1_connectors_connector_connect_get");
    }
    

    # parse inputs
    my $_resource_path = '/v1/connectors/{connector}/connect';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    
    
    # path params
    if ( exists $args{'connector'}) {
        my $_base_variable = "{" . "connector" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'connector'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }
    
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = ['oauth2'];

    # make the API Call
    
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
    
}
#
# v1_connectors_connector_disconnect_get
#
# Delete stored connection info
# 
# @param string $connector Lowercase system name of the source application or device. Get a list of available connectors from the /connectors/list endpoint. (required)
# @return void
#
sub v1_connectors_connector_disconnect_get {
    my ($self, %args) = @_;

    
    # verify the required parameter 'connector' is set
    unless (exists $args{'connector'}) {
      croak("Missing the required parameter 'connector' when calling v1_connectors_connector_disconnect_get");
    }
    

    # parse inputs
    my $_resource_path = '/v1/connectors/{connector}/disconnect';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    
    
    # path params
    if ( exists $args{'connector'}) {
        my $_base_variable = "{" . "connector" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'connector'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }
    
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = ['oauth2'];

    # make the API Call
    
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
    
}
#
# v1_connectors_connector_info_get
#
# Get connector info for user
# 
# @param string $connector Lowercase system name of the source application or device. Get a list of available connectors from the /connectors/list endpoint. (required)
# @return ConnectorInfo
#
sub v1_connectors_connector_info_get {
    my ($self, %args) = @_;

    
    # verify the required parameter 'connector' is set
    unless (exists $args{'connector'}) {
      croak("Missing the required parameter 'connector' when calling v1_connectors_connector_info_get");
    }
    

    # parse inputs
    my $_resource_path = '/v1/connectors/{connector}/info';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    
    
    # path params
    if ( exists $args{'connector'}) {
        my $_base_variable = "{" . "connector" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'connector'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }
    
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = ['oauth2'];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConnectorInfo', $response);
    return $_response_object;
    
}
#
# v1_connectors_connector_update_get
#
# Sync with data source
# 
# @param string $connector Lowercase system name of the source application or device (required)
# @return void
#
sub v1_connectors_connector_update_get {
    my ($self, %args) = @_;

    
    # verify the required parameter 'connector' is set
    unless (exists $args{'connector'}) {
      croak("Missing the required parameter 'connector' when calling v1_connectors_connector_update_get");
    }
    

    # parse inputs
    my $_resource_path = '/v1/connectors/{connector}/update';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    
    
    # path params
    if ( exists $args{'connector'}) {
        my $_base_variable = "{" . "connector" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'connector'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }
    
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = ['oauth2'];

    # make the API Call
    
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
    
}


1;
