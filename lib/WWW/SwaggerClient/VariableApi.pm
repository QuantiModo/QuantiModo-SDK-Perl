#
# Copyright 2015 SmartBear Software
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
#
package WWW::SwaggerClient::VariableApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

sub new {
    my $class   = shift;
    my $default_api_client = $WWW::SwaggerClient::Configuration::api_client ? $WWW::SwaggerClient::Configuration::api_client  : WWW::SwaggerClient::ApiClient->new;
    my (%self) = (
        'api_client' => $default_api_client,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}

#
# variables_get
#
# Get all Variables
# 
# @param int $id id (optional)
# @param string $client_id client_id (optional)
# @param int $parent_id parent_id (optional)
# @param string $name name (optional)
# @param int $variable_category_id variable_category_id (optional)
# @param int $default_unit_id default_unit_id (optional)
# @param string $combination_operation combination_operation (optional)
# @param number $filling_value filling_value (optional)
# @param number $maximum_allowed_value maximum_allowed_value (optional)
# @param number $minimum_allowed_value minimum_allowed_value (optional)
# @param int $onset_delay onset_delay (optional)
# @param int $duration_of_action duration_of_action (optional)
# @param int $public public (optional)
# @param boolean $cause_only cause_only (optional)
# @param number $most_common_value most_common_value (optional)
# @param int $most_common_unit_id most_common_unit_id (optional)
# @param number $standard_deviation standard_deviation (optional)
# @param number $variance variance (optional)
# @param number $mean mean (optional)
# @param number $median median (optional)
# @param number $number_of_measurements number_of_measurements (optional)
# @param number $number_of_unique_values number_of_unique_values (optional)
# @param number $skewness skewness (optional)
# @param number $kurtosis kurtosis (optional)
# @param number $latitude latitude (optional)
# @param number $longitude longitude (optional)
# @param string $location location (optional)
# @param string $status status (optional)
# @param string $error_message error_message (optional)
# @param string $last_successful_update_time last_successful_update_time (optional)
# @param string $created_at created_at (optional)
# @param string $updated_at updated_at (optional)
# @param string $product_url product_url (optional)
# @param string $image_url image_url (optional)
# @param number $price price (optional)
# @param int $number_of_user_variables number_of_user_variables (optional)
# @param boolean $outcome outcome (optional)
# @param number $minimum_recorded_value minimum_recorded_value (optional)
# @param number $maximum_recorded_value maximum_recorded_value (optional)
# @param int $limit limit (optional)
# @param int $offset offset (optional)
# @param string $sort sort (optional)
# @return inline_response_200_27
#
sub variables_get {
    my ($self, %args) = @_;

    

    # parse inputs
    my $_resource_path = '/variables';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }# query params
    if ( exists $args{'client_id'}) {
        $query_params->{'client_id'} = $self->{api_client}->to_query_value($args{'client_id'});
    }# query params
    if ( exists $args{'parent_id'}) {
        $query_params->{'parent_id'} = $self->{api_client}->to_query_value($args{'parent_id'});
    }# query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }# query params
    if ( exists $args{'variable_category_id'}) {
        $query_params->{'variable_category_id'} = $self->{api_client}->to_query_value($args{'variable_category_id'});
    }# query params
    if ( exists $args{'default_unit_id'}) {
        $query_params->{'default_unit_id'} = $self->{api_client}->to_query_value($args{'default_unit_id'});
    }# query params
    if ( exists $args{'combination_operation'}) {
        $query_params->{'combination_operation'} = $self->{api_client}->to_query_value($args{'combination_operation'});
    }# query params
    if ( exists $args{'filling_value'}) {
        $query_params->{'filling_value'} = $self->{api_client}->to_query_value($args{'filling_value'});
    }# query params
    if ( exists $args{'maximum_allowed_value'}) {
        $query_params->{'maximum_allowed_value'} = $self->{api_client}->to_query_value($args{'maximum_allowed_value'});
    }# query params
    if ( exists $args{'minimum_allowed_value'}) {
        $query_params->{'minimum_allowed_value'} = $self->{api_client}->to_query_value($args{'minimum_allowed_value'});
    }# query params
    if ( exists $args{'onset_delay'}) {
        $query_params->{'onset_delay'} = $self->{api_client}->to_query_value($args{'onset_delay'});
    }# query params
    if ( exists $args{'duration_of_action'}) {
        $query_params->{'duration_of_action'} = $self->{api_client}->to_query_value($args{'duration_of_action'});
    }# query params
    if ( exists $args{'public'}) {
        $query_params->{'public'} = $self->{api_client}->to_query_value($args{'public'});
    }# query params
    if ( exists $args{'cause_only'}) {
        $query_params->{'cause_only'} = $self->{api_client}->to_query_value($args{'cause_only'});
    }# query params
    if ( exists $args{'most_common_value'}) {
        $query_params->{'most_common_value'} = $self->{api_client}->to_query_value($args{'most_common_value'});
    }# query params
    if ( exists $args{'most_common_unit_id'}) {
        $query_params->{'most_common_unit_id'} = $self->{api_client}->to_query_value($args{'most_common_unit_id'});
    }# query params
    if ( exists $args{'standard_deviation'}) {
        $query_params->{'standard_deviation'} = $self->{api_client}->to_query_value($args{'standard_deviation'});
    }# query params
    if ( exists $args{'variance'}) {
        $query_params->{'variance'} = $self->{api_client}->to_query_value($args{'variance'});
    }# query params
    if ( exists $args{'mean'}) {
        $query_params->{'mean'} = $self->{api_client}->to_query_value($args{'mean'});
    }# query params
    if ( exists $args{'median'}) {
        $query_params->{'median'} = $self->{api_client}->to_query_value($args{'median'});
    }# query params
    if ( exists $args{'number_of_measurements'}) {
        $query_params->{'number_of_measurements'} = $self->{api_client}->to_query_value($args{'number_of_measurements'});
    }# query params
    if ( exists $args{'number_of_unique_values'}) {
        $query_params->{'number_of_unique_values'} = $self->{api_client}->to_query_value($args{'number_of_unique_values'});
    }# query params
    if ( exists $args{'skewness'}) {
        $query_params->{'skewness'} = $self->{api_client}->to_query_value($args{'skewness'});
    }# query params
    if ( exists $args{'kurtosis'}) {
        $query_params->{'kurtosis'} = $self->{api_client}->to_query_value($args{'kurtosis'});
    }# query params
    if ( exists $args{'latitude'}) {
        $query_params->{'latitude'} = $self->{api_client}->to_query_value($args{'latitude'});
    }# query params
    if ( exists $args{'longitude'}) {
        $query_params->{'longitude'} = $self->{api_client}->to_query_value($args{'longitude'});
    }# query params
    if ( exists $args{'location'}) {
        $query_params->{'location'} = $self->{api_client}->to_query_value($args{'location'});
    }# query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }# query params
    if ( exists $args{'error_message'}) {
        $query_params->{'error_message'} = $self->{api_client}->to_query_value($args{'error_message'});
    }# query params
    if ( exists $args{'last_successful_update_time'}) {
        $query_params->{'last_successful_update_time'} = $self->{api_client}->to_query_value($args{'last_successful_update_time'});
    }# query params
    if ( exists $args{'created_at'}) {
        $query_params->{'created_at'} = $self->{api_client}->to_query_value($args{'created_at'});
    }# query params
    if ( exists $args{'updated_at'}) {
        $query_params->{'updated_at'} = $self->{api_client}->to_query_value($args{'updated_at'});
    }# query params
    if ( exists $args{'product_url'}) {
        $query_params->{'product_url'} = $self->{api_client}->to_query_value($args{'product_url'});
    }# query params
    if ( exists $args{'image_url'}) {
        $query_params->{'image_url'} = $self->{api_client}->to_query_value($args{'image_url'});
    }# query params
    if ( exists $args{'price'}) {
        $query_params->{'price'} = $self->{api_client}->to_query_value($args{'price'});
    }# query params
    if ( exists $args{'number_of_user_variables'}) {
        $query_params->{'number_of_user_variables'} = $self->{api_client}->to_query_value($args{'number_of_user_variables'});
    }# query params
    if ( exists $args{'outcome'}) {
        $query_params->{'outcome'} = $self->{api_client}->to_query_value($args{'outcome'});
    }# query params
    if ( exists $args{'minimum_recorded_value'}) {
        $query_params->{'minimum_recorded_value'} = $self->{api_client}->to_query_value($args{'minimum_recorded_value'});
    }# query params
    if ( exists $args{'maximum_recorded_value'}) {
        $query_params->{'maximum_recorded_value'} = $self->{api_client}->to_query_value($args{'maximum_recorded_value'});
    }# query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }# query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }# query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }
    
    
    
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = [];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('inline_response_200_27', $response);
    return $_response_object;
    
}
#
# variables_post
#
# Store Variable
# 
# @param Variable $body Variable that should be stored (optional)
# @return inline_response_200_28
#
sub variables_post {
    my ($self, %args) = @_;

    

    # parse inputs
    my $_resource_path = '/variables';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    
    
    
    
    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('inline_response_200_28', $response);
    return $_response_object;
    
}
#
# variables_id_get
#
# Get Variable
# 
# @param int $id id of Variable (required)
# @return inline_response_200_28
#
sub variables_id_get {
    my ($self, %args) = @_;

    
    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling variables_id_get");
    }
    

    # parse inputs
    my $_resource_path = '/variables/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    
    
    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }
    
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = [];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('inline_response_200_28', $response);
    return $_response_object;
    
}
#
# variables_id_put
#
# Update Variable
# 
# @param int $id id of Variable (required)
# @param Variable $body Variable that should be updated (optional)
# @return inline_response_200_2
#
sub variables_id_put {
    my ($self, %args) = @_;

    
    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling variables_id_put");
    }
    

    # parse inputs
    my $_resource_path = '/variables/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    
    
    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }
    
    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('inline_response_200_2', $response);
    return $_response_object;
    
}
#
# variables_id_delete
#
# Delete Variable
# 
# @param int $id id of Variable (required)
# @return inline_response_200_2
#
sub variables_id_delete {
    my ($self, %args) = @_;

    
    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling variables_id_delete");
    }
    

    # parse inputs
    my $_resource_path = '/variables/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    
    
    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }
    
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = [];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('inline_response_200_2', $response);
    return $_response_object;
    
}


1;
