#
# Copyright 2016 SmartBear Software
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
#
package WWW::SwaggerClient::ConnectionApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# connections_get
#
# Get all Connections
# 
# @param string $access_token User&#39;s OAuth2 access token (optional)
# @param int $user_id ID of user that owns this correlation (optional)
# @param int $connector_id The id for the connector data source for which the connection is connected (optional)
# @param string $connect_status Indicates whether a connector is currently connected to a service for a user. (optional)
# @param string $connect_error Error message if there is a problem with authorizing this connection. (optional)
# @param string $update_requested_at Time at which an update was requested by a user. (optional)
# @param string $update_status Indicates whether a connector is currently updated. (optional)
# @param string $update_error Indicates if there was an error during the update. (optional)
# @param string $last_successful_updated_at The time at which the connector was last successfully updated. (optional)
# @param string $created_at When the record was first created. Use ISO 8601 datetime format (optional)
# @param string $updated_at When the record was last updated. Use ISO 8601 datetime format (optional)
# @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
# @param int $offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
# @param string $sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
{
    my $params = {
    'access_token' => {
        data_type => 'string',
        description => 'User&#39;s OAuth2 access token',
        required => '0',
    },
    'user_id' => {
        data_type => 'int',
        description => 'ID of user that owns this correlation',
        required => '0',
    },
    'connector_id' => {
        data_type => 'int',
        description => 'The id for the connector data source for which the connection is connected',
        required => '0',
    },
    'connect_status' => {
        data_type => 'string',
        description => 'Indicates whether a connector is currently connected to a service for a user.',
        required => '0',
    },
    'connect_error' => {
        data_type => 'string',
        description => 'Error message if there is a problem with authorizing this connection.',
        required => '0',
    },
    'update_requested_at' => {
        data_type => 'string',
        description => 'Time at which an update was requested by a user.',
        required => '0',
    },
    'update_status' => {
        data_type => 'string',
        description => 'Indicates whether a connector is currently updated.',
        required => '0',
    },
    'update_error' => {
        data_type => 'string',
        description => 'Indicates if there was an error during the update.',
        required => '0',
    },
    'last_successful_updated_at' => {
        data_type => 'string',
        description => 'The time at which the connector was last successfully updated.',
        required => '0',
    },
    'created_at' => {
        data_type => 'string',
        description => 'When the record was first created. Use ISO 8601 datetime format',
        required => '0',
    },
    'updated_at' => {
        data_type => 'string',
        description => 'When the record was last updated. Use ISO 8601 datetime format',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned.',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ connections_get } = { 
    	summary => 'Get all Connections',
        params => $params,
        returns => 'inline_response_200_3',
        };
}
# @return inline_response_200_3
#
sub connections_get {
    my ($self, %args) = @_;

    

    # parse inputs
    my $_resource_path = '/connections';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'access_token'}) {
        $query_params->{'access_token'} = $self->{api_client}->to_query_value($args{'access_token'});
    }# query params
    if ( exists $args{'user_id'}) {
        $query_params->{'user_id'} = $self->{api_client}->to_query_value($args{'user_id'});
    }# query params
    if ( exists $args{'connector_id'}) {
        $query_params->{'connector_id'} = $self->{api_client}->to_query_value($args{'connector_id'});
    }# query params
    if ( exists $args{'connect_status'}) {
        $query_params->{'connect_status'} = $self->{api_client}->to_query_value($args{'connect_status'});
    }# query params
    if ( exists $args{'connect_error'}) {
        $query_params->{'connect_error'} = $self->{api_client}->to_query_value($args{'connect_error'});
    }# query params
    if ( exists $args{'update_requested_at'}) {
        $query_params->{'update_requested_at'} = $self->{api_client}->to_query_value($args{'update_requested_at'});
    }# query params
    if ( exists $args{'update_status'}) {
        $query_params->{'update_status'} = $self->{api_client}->to_query_value($args{'update_status'});
    }# query params
    if ( exists $args{'update_error'}) {
        $query_params->{'update_error'} = $self->{api_client}->to_query_value($args{'update_error'});
    }# query params
    if ( exists $args{'last_successful_updated_at'}) {
        $query_params->{'last_successful_updated_at'} = $self->{api_client}->to_query_value($args{'last_successful_updated_at'});
    }# query params
    if ( exists $args{'created_at'}) {
        $query_params->{'created_at'} = $self->{api_client}->to_query_value($args{'created_at'});
    }# query params
    if ( exists $args{'updated_at'}) {
        $query_params->{'updated_at'} = $self->{api_client}->to_query_value($args{'updated_at'});
    }# query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }# query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }# query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }
    
    
    
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = [qw(quantimodo_oauth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('inline_response_200_3', $response);
    return $_response_object;
    
}

#
# connections_post
#
# Store Connection
# 
# @param string $access_token User&#39;s OAuth2 access token (optional)
# @param Connection $body Connection that should be stored (optional)
{
    my $params = {
    'access_token' => {
        data_type => 'string',
        description => 'User&#39;s OAuth2 access token',
        required => '0',
    },
    'body' => {
        data_type => 'Connection',
        description => 'Connection that should be stored',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ connections_post } = { 
    	summary => 'Store Connection',
        params => $params,
        returns => 'inline_response_200_14',
        };
}
# @return inline_response_200_14
#
sub connections_post {
    my ($self, %args) = @_;

    

    # parse inputs
    my $_resource_path = '/connections';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'access_token'}) {
        $query_params->{'access_token'} = $self->{api_client}->to_query_value($args{'access_token'});
    }
    
    
    
    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(quantimodo_oauth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('inline_response_200_14', $response);
    return $_response_object;
    
}

#
# connections_id_get
#
# Get Connection
# 
# @param int $id id of Connection (required)
# @param string $access_token User&#39;s OAuth2 access token (optional)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'id of Connection',
        required => '1',
    },
    'access_token' => {
        data_type => 'string',
        description => 'User&#39;s OAuth2 access token',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ connections_id_get } = { 
    	summary => 'Get Connection',
        params => $params,
        returns => 'inline_response_200_14',
        };
}
# @return inline_response_200_14
#
sub connections_id_get {
    my ($self, %args) = @_;

    
    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling connections_id_get");
    }
    

    # parse inputs
    my $_resource_path = '/connections/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'access_token'}) {
        $query_params->{'access_token'} = $self->{api_client}->to_query_value($args{'access_token'});
    }
    
    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }
    
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = [qw(quantimodo_oauth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('inline_response_200_14', $response);
    return $_response_object;
    
}

#
# connections_id_put
#
# Update Connection
# 
# @param int $id id of Connection (required)
# @param string $access_token User&#39;s OAuth2 access token (optional)
# @param Connection $body Connection that should be updated (optional)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'id of Connection',
        required => '1',
    },
    'access_token' => {
        data_type => 'string',
        description => 'User&#39;s OAuth2 access token',
        required => '0',
    },
    'body' => {
        data_type => 'Connection',
        description => 'Connection that should be updated',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ connections_id_put } = { 
    	summary => 'Update Connection',
        params => $params,
        returns => 'inline_response_200_2',
        };
}
# @return inline_response_200_2
#
sub connections_id_put {
    my ($self, %args) = @_;

    
    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling connections_id_put");
    }
    

    # parse inputs
    my $_resource_path = '/connections/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'access_token'}) {
        $query_params->{'access_token'} = $self->{api_client}->to_query_value($args{'access_token'});
    }
    
    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }
    
    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(quantimodo_oauth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('inline_response_200_2', $response);
    return $_response_object;
    
}

#
# connections_id_delete
#
# Delete Connection
# 
# @param int $id id of Connection (required)
# @param string $access_token User&#39;s OAuth2 access token (optional)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'id of Connection',
        required => '1',
    },
    'access_token' => {
        data_type => 'string',
        description => 'User&#39;s OAuth2 access token',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ connections_id_delete } = { 
    	summary => 'Delete Connection',
        params => $params,
        returns => 'inline_response_200_2',
        };
}
# @return inline_response_200_2
#
sub connections_id_delete {
    my ($self, %args) = @_;

    
    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling connections_id_delete");
    }
    

    # parse inputs
    my $_resource_path = '/connections/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'access_token'}) {
        $query_params->{'access_token'} = $self->{api_client}->to_query_value($args{'access_token'});
    }
    
    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }
    
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = [qw(quantimodo_oauth2 )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('inline_response_200_2', $response);
    return $_response_object;
    
}


1;
